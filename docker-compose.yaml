---
version: '3.7'
services:
  zookeeper1:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper1
    container_name: zookeeper1
    ports:
      - "2181:2181"
    command: zookeeper-server-start /etc/kafka/zookeeper.properties
    environment:
      EXTRA_ARGS: -javaagent:/usr/share/jmx-exporter/jmx_prometheus_javaagent-0.18.0.jar=9103:/usr/share/jmx-exporter/zookeeper.yml
    volumes:
    - ./zookeeper1:/etc/kafka
    - ./jmx-exporter:/usr/share/jmx-exporter
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M

  # zookeeper2:
    # image: confluentinc/cp-zookeeper:7.4.0
    # hostname: zookeeper2
    # container_name: zookeeper2
    # ports:
    #   - "2182:2182"
    # command: zookeeper-server-start /etc/kafka/zookeeper.properties
    # environment:
    #   EXTRA_ARGS: -javaagent:/usr/share/jmx-exporter/jmx_prometheus_javaagent-0.18.0.jar=9103:/usr/share/jmx-exporter/zookeeper.yml
    # volumes:
    # - ./zookeeper2:/etc/kafka
    # - ./jmx-exporter:/usr/share/jmx-exporter

  # zookeeper3:
    # image: confluentinc/cp-zookeeper:7.4.0
    # hostname: zookeeper3
    # container_name: zookeeper3
    # ports:
    #   - "2183:2183"
    # command: zookeeper-server-start /etc/kafka/zookeeper.properties
    # environment:
    #   EXTRA_ARGS: -javaagent:/usr/share/jmx-exporter/jmx_prometheus_javaagent-0.18.0.jar=9103:/usr/share/jmx-exporter/zookeeper.yml
    # volumes:
    # - ./zookeeper3:/etc/kafka
    # - ./jmx-exporter:/usr/share/jmx-exporter

  kafka1:
    image: confluentinc/cp-server:7.4.0
    hostname: kafka1
    container_name: kafka1
    depends_on:
      - zookeeper1
      # - zookeeper2
      # - zookeeper3
    command: kafka-server-start /etc/kafka/server.properties
    environment:
      EXTRA_ARGS: -javaagent:/usr/share/jmx-exporter/jmx_prometheus_javaagent-0.18.0.jar=9101:/usr/share/jmx-exporter/kafka_broker.yml
    volumes:
    - ./kafka1:/etc/kafka
    - ./jmx-exporter:/usr/share/jmx-exporter
    deploy:
      resources:
        limits:
          cpus: "1.5"
          memory: 1536M

  kafka2:
    image: confluentinc/cp-server:7.4.0
    hostname: kafka2
    container_name: kafka2
    depends_on:
      - zookeeper1
      # - zookeeper2
      # - zookeeper3
    command: kafka-server-start /etc/kafka/server.properties
    environment:
      EXTRA_ARGS: -javaagent:/usr/share/jmx-exporter/jmx_prometheus_javaagent-0.18.0.jar=9102:/usr/share/jmx-exporter/kafka_broker.yml
    volumes:
    - ./kafka2:/etc/kafka
    - ./jmx-exporter:/usr/share/jmx-exporter
    deploy:
      resources:
        limits:
          cpus: "1.5"
          memory: 1536M
  
  kafka3:
    image: confluentinc/cp-server:7.4.0
    hostname: kafka3
    container_name: kafka3
    depends_on:
      - zookeeper1
      # - zookeeper2
      # - zookeeper3
    command: kafka-server-start /etc/kafka/server.properties
    environment:
      EXTRA_ARGS: -javaagent:/usr/share/jmx-exporter/jmx_prometheus_javaagent-0.18.0.jar=9103:/usr/share/jmx-exporter/kafka_broker.yml
    volumes:
    - ./kafka3:/etc/kafka
    - ./jmx-exporter:/usr/share/jmx-exporter
    deploy:
      resources:
        limits:
          cpus: "1.5"
          memory: 1536M

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    command: schema-registry-start /etc/schema-registry/schema-registry.properties
    ports:
      - "8081:8081"
    volumes:
    - ./schema-registry:/etc/schema-registry
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M

  connect:
    image: confluentinc/cp-server-connect:7.4.0
    hostname: connect
    container_name: connect
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - schema-registry
    command: connect-distributed /etc/kafka/connect-distributed.properties
    ports:
      - "8083:8083"
    volumes:
    - ./connect:/etc/kafka
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2048M

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - schema-registry
      - connect
    ports:
      - "9021:9021"
    command: control-center-start /etc/confluent-control-center/control-center-production.properties
    environment:
      PORT: 9021
    volumes:
    - ./confluent-control-center:/etc/confluent-control-center
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1024M

  kfkclient:
    build: ./client
    hostname: kfkclient
    container_name: kfkclient
    depends_on:
      - kafka1
    volumes:
    - ./client:/opt/client
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: 256M

  openldap:
    image: osixia/openldap:1.3.0
    hostname: openldap
    container_name: openldap
    environment:
        LDAP_ORGANISATION: "ConfluentDemo"
        LDAP_DOMAIN: "confluentdemo.io"
        LDAP_BASE_DN: "dc=confluentdemo,dc=io"
    ports:
      - "389:389"
    volumes:
        - ./ldap/ldap_users:/container/service/slapd/assets/config/bootstrap/ldif/custom
    command: "--copy-service --loglevel debug"
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: 256M

  prometheus:
    image: prom/prometheus:v2.37.7
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    ports:
    - 9090:9090
    expose:
    - 9090
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: 256M

  grafana:
    image: grafana/grafana:8.5.24
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    ports:
    - 3000:3000
    expose:
      - 3000
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: 256M

volumes:
    prometheus_data: {}
    grafana_data: {}

